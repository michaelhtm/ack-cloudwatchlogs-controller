// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// LogGroupSpec defines the desired state of LogGroup.
//
// Represents a log group.
type LogGroupSpec struct {

	// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log
	// data. For more information, see Amazon Resource Names (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms).
	KMSKeyID  *string                                  `json:"kmsKeyID,omitempty"`
	KMSKeyRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"kmsKeyRef,omitempty"`
	// +kubebuilder:validation:Required
	Name                *string                       `json:"name"`
	RetentionDays       *int64                        `json:"retentionDays,omitempty"`
	SubscriptionFilters []*PutSubscriptionFilterInput `json:"subscriptionFilters,omitempty"`
	// The key-value pairs to use for the tags.
	//
	// You can grant users access to certain log groups while preventing them from
	// accessing other log groups. To do so, tag your groups and use IAM policies
	// that refer to those tags. To assign tags when you create a log group, you
	// must have either the logs:TagResource or logs:TagLogGroup permission. For
	// more information about tagging, see Tagging Amazon Web Services resources
	// (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html). For more
	// information about using tags to control access, see Controlling access to
	// Amazon Web Services resources using tags (https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html).
	Tags map[string]*string `json:"tags,omitempty"`
}

// LogGroupStatus defines the observed state of LogGroup
type LogGroupStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The creation time of the log group, expressed as the number of milliseconds
	// after Jan 1, 1970 00:00:00 UTC.
	// +kubebuilder:validation:Optional
	CreationTime *int64 `json:"creationTime,omitempty"`
	// Displays whether this log group has a protection policy, or whether it had
	// one in the past. For more information, see PutDataProtectionPolicy (https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDataProtectionPolicy.html).
	// +kubebuilder:validation:Optional
	DataProtectionStatus *string `json:"dataProtectionStatus,omitempty"`
	// The number of metric filters.
	// +kubebuilder:validation:Optional
	MetricFilterCount *int64 `json:"metricFilterCount,omitempty"`
	// +kubebuilder:validation:Optional
	RetentionInDays *int64 `json:"retentionInDays,omitempty"`
	// The number of bytes stored.
	// +kubebuilder:validation:Optional
	StoredBytes *int64 `json:"storedBytes,omitempty"`
}

// LogGroup is the Schema for the LogGroups API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type LogGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogGroupSpec   `json:"spec,omitempty"`
	Status            LogGroupStatus `json:"status,omitempty"`
}

// LogGroupList contains a list of LogGroup
// +kubebuilder:object:root=true
type LogGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogGroup `json:"items"`
}

func init() {
	SchemeBuilder.Register(&LogGroup{}, &LogGroupList{})
}
